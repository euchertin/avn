require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const { initializeApp } = require('firebase/app');
const { getFirestore, collection, query, where, getDocs, updateDoc, doc, deleteDoc, orderBy } = require('firebase/firestore');

const app = express();
app.use(bodyParser.json());

const {
  FIREBASE_API_KEY,
  FIREBASE_AUTH_DOMAIN,
  FIREBASE_PROJECT_ID,
  FIREBASE_STORAGE_BUCKET,
  FIREBASE_MESSAGING_SENDER_ID,
  FIREBASE_APP_ID,
  VK_BOT_TOKEN,
  VK_CONFIRMATION_TOKEN,
  VK_SECRET_KEY,
  VK_ADMIN_ID,
  PORT = 3000
} = process.env;

const ADMIN_IDS = VK_ADMIN_ID.split(','); // –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const firebaseConfig = {
  apiKey: FIREBASE_API_KEY,
  authDomain: FIREBASE_AUTH_DOMAIN,
  projectId: FIREBASE_PROJECT_ID,
  storageBucket: FIREBASE_STORAGE_BUCKET,
  messagingSenderId: FIREBASE_MESSAGING_SENDER_ID,
  appId: FIREBASE_APP_ID
};

const fbApp = initializeApp(firebaseConfig);
const db = getFirestore(fbApp);

// ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ VK Callback ====================
app.post('/vk-callback', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    if (req.body.secret !== VK_SECRET_KEY) {
      return res.status(403).send('Invalid secret key');
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    if (req.body.type === 'confirmation') {
      return res.send(VK_CONFIRMATION_TOKEN);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (req.body.type === 'message_new') {
      const msg = req.body.object.message;
      const userId = msg.from_id.toString();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
      if (!ADMIN_IDS.includes(userId)) {
        return res.send('ok');
      }

      const text = msg.text.toLowerCase().trim();

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (text.startsWith('–ø—Ä–∏–Ω—è—Ç—å')) {
        const identifier = text.replace('–ø—Ä–∏–Ω—è—Ç—å', '').trim();
        await handleAccept(userId, identifier);
      } 
      else if (text.startsWith('–æ—Ç–∫–ª–æ–Ω–∏—Ç—å')) {
        const identifier = text.replace('–æ—Ç–∫–ª–æ–Ω–∏—Ç—å', '').trim();
        await handleReject(userId, identifier);
      }
      else if (text === '–∑–∞—è–≤–∫–∏' || text === '/–∑–∞—è–≤–∫–∏') {
        await sendApplicationsList(userId);
      }
      else if (text === '–ø–æ–º–æ—â—å' || text === '/help') {
        await sendHelp(userId);
      }

      return res.send('ok');
    }

    res.send('ok');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    res.status(500).send('Server Error');
  }
});

// ==================== –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====================

// –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É
async function handleAccept(userId, identifier) {
  try {
    const app = await findApplication(identifier);
    if (!app) {
      return await sendMessage(userId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–∑–∞—è–≤–∫–∏¬ª –¥–ª—è —Å–ø–∏—Å–∫–∞.');
    }

    await updateDoc(doc(db, "applications", app.id), { 
      status: "approved",
      approvedAt: new Date(),
      approvedBy: userId
    });

    await sendMessage(userId, `‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: ¬´${app.unitary}¬ª\n–ü—Ä–∞–≤–∏—Ç–µ–ª—å: ${app.rulerName}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è:', error);
    await sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏');
  }
}

// –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
async function handleReject(userId, identifier) {
  try {
    const app = await findApplication(identifier);
    if (!app) {
      return await sendMessage(userId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–∑–∞—è–≤–∫–∏¬ª –¥–ª—è —Å–ø–∏—Å–∫–∞.');
    }

    await deleteDoc(doc(db, "applications", app.id));
    await sendMessage(userId, `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ¬´${app.unitary}¬ª`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error);
    await sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
  }
}

// –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É (–ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é)
async function findApplication(identifier) {
  const apps = await getPendingApplications();
  if (!identifier) return apps[0]; // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ ‚Äî –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é

  // –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É
  if (/^\d+$/.test(identifier)) {
    return apps[parseInt(identifier) - 1];
  }

  // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  return apps.find(app => 
    app.unitary.toLowerCase().includes(identifier.toLowerCase())
  );
}

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
async function sendApplicationsList(userId) {
  const apps = await getPendingApplications();
  if (apps.length === 0) {
    return await sendMessage(userId, 'üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏');
  }

  // –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
  let message = 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n';
  apps.forEach((app, index) => {
    message += `${index + 1}. ¬´${app.unitary}¬ª\n` +
               `   üëë ${app.rulerName}\n` +
               `   üèõ ${app.ruleForm}\n` +
               `   üë• ${app.population}\n\n` +
               `   ‚úÖ –ø—Ä–∏–Ω—è—Ç—å ${index + 1}\n` +
               `   ‚ùå –æ—Ç–∫–ª–æ–Ω–∏—Ç—å ${index + 1}\n\n` +
               '‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n\n';
  });

  await sendMessage(userId, message);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
  for (const app of apps) {
    await sendApplicationImages(userId, app);
  }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
async function sendApplicationImages(userId, app) {
  try {
    const images = [];
    if (app.flagUrl) images.push(app.flagUrl);
    if (app.rulerPhotoUrl) images.push(app.rulerPhotoUrl);
    if (app.currencyPhotoUrl) images.push(app.currencyPhotoUrl);

    if (images.length > 0) {
      await sendMessage(
        userId,
        `üì∑ ¬´${app.unitary}¬ª: —Ñ–ª–∞–≥${app.rulerPhotoUrl ? ', –ø—Ä–∞–≤–∏—Ç–µ–ª—å' : ''}${app.currencyPhotoUrl ? ', –≤–∞–ª—é—Ç–∞' : ''}`,
        images
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –∏–∑ Firebase
async function getPendingApplications() {
  const q = query(
    collection(db, "applications"),
    where("status", "==", "pending"),
    orderBy("timestamp", "asc")
  );
  const snapshot = await getDocs(q);
  return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
async function sendHelp(userId) {
  const helpText = `üìå –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n\n` +
    `‚Ä¢ ¬´–ø—Ä–∏–Ω—è—Ç—å 1¬ª ‚Äî –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É ‚Ññ1\n` +
    `‚Ä¢ ¬´–ø—Ä–∏–Ω—è—Ç—å –§—Ä–∞–Ω—Ü–∏—è¬ª ‚Äî –ø—Ä–∏–Ω—è—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n` +
    `‚Ä¢ ¬´–æ—Ç–∫–ª–æ–Ω–∏—Ç—å 2¬ª ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚Ññ2\n` +
    `‚Ä¢ ¬´–∑–∞—è–≤–∫–∏¬ª ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫\n\n` +
    `üìé –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç:\n` +
    `‚Äî –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏\n` +
    `‚Äî –§–ª–∞–≥, —Ñ–æ—Ç–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –≤–∞–ª—é—Ç—É`;
  
  await sendMessage(userId, helpText);
}

// ==================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====================

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ VK
async function sendMessage(userId, text, images = []) {
  try {
    let attachment = '';
    if (images.length > 0) {
      attachment = images.map(url => `photo${encodeURIComponent(url)}`).join(',');
    }

    await axios.post('https://api.vk.com/method/messages.send', null, {
      params: {
        access_token: VK_BOT_TOKEN,
        user_id: userId,
        message: text,
        attachment,
        random_id: Math.floor(Math.random() * 1000000),
        v: '5.131'
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.response?.data || error.message);
  }
}

// ==================== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ====================
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});